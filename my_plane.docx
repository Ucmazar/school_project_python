ساختار حرفه‌ای پروژه Django برای سیستم مدیریت مدرسه
این ساختار مناسب پروژههای بزرگ Django است که در آینده قابلیت گسترش داشته باشند، مثل افزودن حضور و غیاب، گزارشگیری، سیستم نمرهدهی، مدیریت والدین، احراز هویت، و غیره.
ساختار پوشهها

school_project/
├── manage.py
├── school_project/             ← تنظیمات اصلی Django
│   ├── settings.py
│   ├── urls.py
│   └── ...
│
├── core/                       ← مدلهای پایه (مثلاً UserProfile)
│   ├── models.py
│   ├── admin.py
│   ├── views.py
│   ├── urls.py
│   └── ...
│
├── accounts/                   ← لاگین، ثبتنام، احراز هویت، پروفایلها
├── students/                   ← فقط اطلاعات شاگردان
├── teachers/                   ← فقط اطلاعات استادان
├── classrooms/                 ← کلاسها و تخصیص آنها
├── subjects/                   ← مضامین و کتابهای درسی
├── grades/                     ← نمرات و نتیجهها
├── attendance/                 ← حضور و غیاب شاگردان
├── parents/                    ← اطلاعات والدین شاگردان

توضیح دقیق هر بخش از ساختار پروژه Django مدرسه که مناسب پروژههای بزرگ و قابل گسترش است:
core/
این اپ، قلب پروژه است و شامل مدلها و کلاسهایی میشود که بین همه اپها مشترک هستند. مثل مدل کاربر اصلی (UserProfile)، مدلهای پایه و کلاسهای کمکی. مثال: مدل UserProfile که نقش کاربر (معلم، شاگرد، مدیر، والد) را تعریف میکند. کلاسهای پایه (BaseModel) که ویژگیهای مشترک مثل تاریخ ایجاد، تاریخ ویرایش را به مدلها میدهد.
accounts/
مدیریت احراز هویت کاربران است. اینجا لاگین، ثبتنام، فراموشی رمز عبور، تغییر رمز، و مدیریت پروفایل انجام میشود. امنیت مهم است و بهتر است این بخش جدا از بخش دادهها و مدلها نگه داشته شود تا بتوان آن را به سادگی توسعه داد یا با سیستمهای خارجی (مثلاً Google OAuth) یکپارچه کرد. امکانات شامل صفحه ورود و خروج، ثبت نام کاربران جدید، بازیابی رمز عبور، مدیریت دسترسیها و سطوح کاربران است.
students/
تمام اطلاعات مربوط به دانشآموزان را مدیریت میکند. مدلها شامل مشخصات فردی دانشآموز (نام، تاریخ تولد، شماره ثبتنام، آدرس)، کلاسهایی که دانشآموز در آنها حضور دارد، وضعیت تحصیلی. کاربرد: ثبت، ویرایش و مشاهده اطلاعات شاگردان.
teachers/
مدیریت اطلاعات معلمان و استادان مدرسه. مدلها شامل مشخصات فردی معلم (نام، تخصص، شماره تماس)، دروس یا کلاسهایی که تدریس میکند. کاربرد: ثبت معلم جدید، اختصاص دادن کلاس به معلم، مشاهده لیست معلمان و تغییر اطلاعات.
classrooms/
مدیریت کلاسها و تخصیص آنها به معلمان و دانشآموزان. مدلها شامل کلاس (مثلاً کلاس ۱۰ الف)، ظرفیت کلاس، زمان و مکان برگزاری کلاس. کاربرد: تعریف کلاسها، ارتباط دانشآموزان و معلمان با کلاس، مدیریت زمانبندی کلاسها.
subjects/
مدیریت مضامین و دروس مدرسه. مدلها شامل نام درس (مثلاً ریاضی، فیزیک)، توضیح درس، کتابها و منابع مرتبط. کاربرد: ثبت و مدیریت دروس، تعریف درس جدید و نگهداری اطلاعات مربوط به هر درس.
grades/
مدیریت نمرات دانشآموزان و محاسبه نتایج. مدلها شامل نمره هر دانشآموز در هر درس، تاریخ ثبت نمره، نوع نمره (کلاسی، امتحان، پروژه). کاربرد: ثبت نمرات، مشاهده ریز نمرات و محاسبه معدل و وضعیت قبولی دانشآموزان.
attendance/
ثبت و مدیریت حضور و غیاب دانشآموزان در کلاسها. مدلها شامل تاریخ حضور، وضعیت (حاضر، غایب، دیرکرد)، کلاس مربوطه. کاربرد: ثبت روزانه وضعیت حضور شاگردان و تهیه گزارشهای حضور و غیاب.
parents/
مدیریت اطلاعات والدین دانشآموزان و ارتباط آنها با مدرسه. مدلها شامل مشخصات والدین (نام، شماره تماس، رابطه با دانشآموز)، ارتباط با دانشآموزان (هر والد ممکن است چند دانشآموز داشته باشد). کاربرد: ثبت اطلاعات والدین، مشاهده وضعیت تحصیلی فرزندان و ارتباط والدین با مدرسه.

نقشها و وظایف هر اپ
مراحل ساخت پروژه
1.	1. ساخت پروژه:
Python –m venv .venv
.venv\scripts\activate
django-admin startproject school_project .
2.	2. ساخت اپها:

python manage.py startapp core
python manage.py startapp accounts
python manage.py startapp students
python manage.py startapp teachers
python manage.py startapp classrooms
python manage.py startapp grades
python manage.py startapp attendance
python manage.py startapp parents

3.	3. ثبت اپها در settings.py:

INSTALLED_APPS = [
    ...
    'core',
    'accounts',
    'students',
    'teachers',
    'classrooms',
    'grades',
    'attendance',
    'parents',
]

